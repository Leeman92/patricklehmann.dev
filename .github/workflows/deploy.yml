name: Deploy My Website

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: harbor.patricklehmann.dev/website/website:latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Harbor
        uses: docker/login-action@v2
        with:
          registry: harbor.patricklehmann.dev
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          target: production
          push: true
          tags: harbor.patricklehmann.dev/website/website:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: patrick
          port: ${{ secrets.SERVER_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-stack.yml"
          target: "/home/patrick/website"
          strip_components: 0

      - name: SSH into server and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: patrick
          port: ${{ secrets.SERVER_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 5m
          script: |
            set -e
            echo "Starting deployment..."
            
            # Initialize swarm if not already initialized
            if ! docker info | grep -q "Swarm: active"; then
              echo "Initializing Docker Swarm..."
              docker swarm init
            fi
            
            # Create network if it doesn't exist
            echo "Setting up network..."
            docker network create --driver overlay website-network || true
            
            # Clean up old images
            echo "Cleaning up old images..."
            docker image prune -f --filter "until=24h"
            
            # Pull the latest image
            echo "Pulling latest image..."
            docker pull harbor.patricklehmann.dev/website/website:latest
            
            # Deploy the stack
            echo "Deploying stack..."
            cd /home/patrick/website
            docker stack deploy -c docker-stack.yml website
            
            # Wait for services to be ready
            echo "Waiting for services to be ready..."
            timeout=120
            while [ $timeout -gt 0 ]; do
              if docker service ls | grep website_website | grep -q "2/2"; then
                echo "All replicas are running!"
                break
              fi
              sleep 2
              timeout=$((timeout-2))
            done
            
            if [ $timeout -eq 0 ]; then
              echo "Service deployment failed!"
              docker service logs website_website
              exit 1
            fi
            
            # Verify deployment
            echo "Verifying deployment..."
            sleep 10  # Give services time to stabilize
            
            # Check service health
            if ! docker service ls | grep website_website | grep -q "2/2"; then
              echo "Service health check failed!"
              docker service logs website_website
              exit 1
            fi
            
            # Check container health
            unhealthy_containers=$(docker ps --filter "health=unhealthy" --filter "name=website" --format "{{.Names}}")
            if [ ! -z "$unhealthy_containers" ]; then
              echo "Found unhealthy containers:"
              echo "$unhealthy_containers"
              docker service logs website_website
              exit 1
            fi
            
            echo "Deployment completed successfully!"


