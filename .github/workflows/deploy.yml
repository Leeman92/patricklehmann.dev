name: Deploy My Website

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Harbor
        uses: docker/login-action@v2
        with:
          registry: harbor.patricklehmann.dev
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          target: production
          push: true
          tags: harbor.patricklehmann.dev/website/website:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: SSH into server and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: patrick
          port: ${{ secrets.SERVER_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 5m
          script: |
            set -e
            echo "Starting deployment..."
            
            # Pull the latest image
            echo "Pulling latest image..."
            docker pull harbor.patricklehmann.dev/website/website:latest
            
            # Stop and remove existing container
            echo "Stopping existing container..."
            docker stop website || true
            docker rm website || true
            
            # Clean up old images
            echo "Cleaning up old images..."
            docker image prune -f
            
            # Create network if it doesn't exist
            echo "Setting up network..."
            docker network create website-network || true
            
            # Run the new container
            echo "Starting new container..."
            docker run -d \
              --name website \
              --restart=always \
              --network website-network \
              -p 3000:3000 \
              -e NODE_ENV=production \
              harbor.patricklehmann.dev/website/website:latest
            
            # Wait for container to be healthy
            echo "Waiting for container to be healthy..."
            timeout=60
            while [ $timeout -gt 0 ]; do
              if curl -s http://localhost:3000 > /dev/null; then
                echo "Container is healthy!"
                break
              fi
              sleep 1
              timeout=$((timeout-1))
            done
            
            if [ $timeout -eq 0 ]; then
              echo "Container health check failed!"
              docker logs website
              exit 1
            fi
            
            echo "Deployment completed successfully!"


